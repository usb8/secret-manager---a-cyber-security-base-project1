#!/bin/bash

PYTHON_CMD=$(command -v python3 || command -v python)
if [ -z "$PYTHON_CMD" ]; then
    echo "Error: Python interpreter not found (requires Python 3)."
    echo "Please install Python 3 or make sure your 'python3' or 'python' command is the Python 3 version."
    exit 1
fi
echo "Using Python command: $PYTHON_CMD"

# Create virtual environment
"$PYTHON_CMD" -m pip install virtualenv
"$PYTHON_CMD" -m virtualenv .venv
source .venv/bin/activate

# Install dependencies
pip install -r requirements.txt # pip freeze > requirements.txt

# Setup database and create default users
"$PYTHON_CMD" manage.py makemigrations
"$PYTHON_CMD" manage.py migrate # It executes migration files (generated by manage.py makemigrations command) to update the database schema
"$PYTHON_CMD" manage.py shell << EOF
from django.contrib.auth.models import User
from secret_manager.models import Secret

if not User.objects.filter(username='admin').exists():
  # Create default users
  User.objects.create_superuser('admin', 'admin@example.com', 'admin123')
  User.objects.create_user('alice', 'alice@example.com', 'AlicePassword123!')
  User.objects.create_user('bob', 'bob@example.com', 'BobPassword123!')

  # Create some sample secrets
  alice = User.objects.get(username='alice')
  bob = User.objects.get(username='bob')

  Secret.objects.create(
      user=alice,
      title="Bank Account",
      secret_header="Username: alice_bank",
      secret_key="s3cr3t123",
  )

  Secret.objects.create(
      user=alice,
      title="Treasure Location",
      secret_key="Under the oak tree in the backyard",
  )

  Secret.objects.create(
      user=bob,
      title="Email Password",
      secret_header="Email: bob_sub@example.com",
      secret_key="b0b3m@il",
  )
EOF

echo "Setup complete. Use 'bash ./run.sh' to start the server."